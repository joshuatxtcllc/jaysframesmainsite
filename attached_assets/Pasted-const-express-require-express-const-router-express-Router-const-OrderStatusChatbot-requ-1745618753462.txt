const express = require('express');
const router = express.Router();
const OrderStatusChatbot = require('../../ai/chatbot/OrderStatusChatbot');
const logger = require('../utils/logger');

// Initialize the chatbot
const chatbot = new OrderStatusChatbot();

/**
 * @route   POST /api/chatbot
 * @desc    Process a message with the order status chatbot
 * @access  Public
 */
router.post('/', async (req, res) => {
  const { message, context = {} } = req.body;
  
  if (!message) {
    return res.status(400).json({ error: 'Message is required' });
  }
  
  try {
    // Initialize chatbot if not already initialized
    await chatbot.initialize();
    
    // Process the message
    const response = await chatbot.processMessage(message, context);
    
    // Return the chatbot response
    res.json(response);
  } catch (error) {
    logger.error('Error processing chatbot message:', error);
    res.status(500).json({ 
      text: "I'm sorry, I'm having trouble understanding right now. Please try again later.",
      context: context
    });
  }
});

/**
 * @route   POST /api/chatbot/train
 * @desc    Trigger retraining of the chatbot model (admin only)
 * @access  Private/Admin
 */
router.post('/train', async (req, res) => {
  // This route should be protected by admin authentication middleware
  // For demonstration purposes, we're not adding the middleware here
  
  try {
    await chatbot.initialize();
    
    // Force retraining of the model
    await chatbot._trainNlpModel();
    
    res.json({ message: 'Chatbot model retrained successfully' });
  } catch (error) {
    logger.error('Error retraining chatbot model:', error);
    res.status(500).json({ error: 'Failed to retrain chatbot model' });
  }
});

/**
 * @route   GET /api/chatbot/health
 * @desc    Check if the chatbot is operational
 * @access  Public
 */
router.get('/health', async (req, res) => {
  try {
    // Check if chatbot can be initialized
    const initialized = await chatbot.initialize();
    
    if (initialized) {
      res.json({ status: 'healthy' });
    } else {
      res.status(503).json({ status: 'unhealthy', error: 'Failed to initialize chatbot' });
    }
  } catch (error) {
    logger.error('Chatbot health check failed:', error);
    res.status(503).json({ status: 'unhealthy', error: error.message });
  }
});

/**
 * @route   POST /api/chatbot/lookup
 * @desc    Directly lookup an order by ID (useful for testing)
 * @access  Private/Admin
 */
router.post('/lookup', async (req, res) => {
  // This route should be protected by admin authentication middleware
  // For demonstration purposes, we're not adding the middleware here
  
  const { orderNumber } = req.body;
  
  if (!orderNumber) {
    return res.status(400).json({ error: 'Order number is required' });
  }
  
  try {
    await chatbot.initialize();
    
    // Use the chatbot's private method to look up order information
    const orderInfo = await chatbot._getOrderInformation(orderNumber);
    
    if (!orderInfo) {
      return res.status(404).json({ error: 'Order not found' });
    }
    
    res.json(orderInfo);
  } catch (error) {
    logger.error(`Error looking up order ${orderNumber}:`, error);
    res.status(500).json({ error: 'Failed to lookup order' });
  }
});

module.exports = router;