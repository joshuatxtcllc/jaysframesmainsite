import React, { useState, useEffect } from 'react';
import axios from 'axios';
import artworkAnalysisService from '../services/ArtworkAnalysis';
import '../styles/FrameSelector.css';

/**
 * FrameSelector Component
 * 
 * Component for browsing and selecting frame styles with AI
 * recommendations based on the uploaded artwork
 */
const FrameSelector = ({ 
  artwork, 
  selectedFrame, 
  onSelectFrame,
  dominantColors 
}) => {
  const [frameStyles, setFrameStyles] = useState([]);
  const [filteredFrames, setFilteredFrames] = useState([]);
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [sortBy, setSortBy] = useState('recommended');
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [recommendations, setRecommendations] = useState([]);
  const [viewMode, setViewMode] = useState('grid'); // 'grid' or 'list'

  // Fetch frame styles on component mount
  useEffect(() => {
    const fetchFrameStyles = async () => {
      try {
        setIsLoading(true);
        const response = await axios.get('/api/frames');
        setFrameStyles(response.data);
        
        // Extract unique categories
        const uniqueCategories = ['all'];
        response.data.forEach(frame => {
          frame.tags.forEach(tag => {
            if (!uniqueCategories.includes(tag)) {
              uniqueCategories.push(tag);
            }
          });
        });
        
        setCategories(uniqueCategories);
        setFilteredFrames(response.data);
        setIsLoading(false);
      } catch (error) {
        console.error('Error fetching frame styles:', error);
        setIsLoading(false);
      }
    };
    
    fetchFrameStyles();
  }, []);

  // Get AI recommendations when artwork changes
  useEffect(() => {
    const getRecommendations = async () => {
      if (!artwork) return;
      
      try {
        const analysis = await artworkAnalysisService.analyzeArtwork(artwork);
        setRecommendations(analysis.frameRecommendations.map(frame => frame.id));
      } catch (error) {
        console.error('Error getting frame recommendations:', error);
      }
    };
    
    getRecommendations();
  }, [artwork]);

  // Apply filters and sorting when dependencies change
  useEffect(() => {
    let result = [...frameStyles];
    
    // Apply category filter
    if (selectedCategory !== 'all') {
      result = result.filter(frame => 
        frame.tags && frame.tags.includes(selectedCategory)
      );
    }
    
    // Apply search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter(frame => 
        frame.name.toLowerCase().includes(query) || 
        frame.description.toLowerCase().includes(query) ||
        (frame.tags && frame.tags.some(tag => tag.toLowerCase().includes(query)))
      );
    }
    
    // Apply sorting
    if (sortBy === 'recommended' && recommendations.length > 0) {
      // Sort by recommendation order
      result.sort((a, b) => {
        const aIndex = recommendations.indexOf(a.id);
        const bIndex = recommendations.indexOf(b.id);
        
        if (aIndex === -1 && bIndex === -1) return 0;
        if (aIndex === -1) return 1;
        if (bIndex === -1) return -1;
        
        return aIndex - bIndex;
      });
    } else if (sortBy === 'price_low') {
      // Sort by price (low to high)
      result.sort((a, b) => (a.pricePerInch || 0) - (b.pricePerInch || 0));
    } else if (sortBy === 'price_high') {
      // Sort by price (high to low)
      result.sort((a, b) => (b.pricePerInch || 0) - (a.pricePerInch || 0));
    } else if (sortBy === 'popularity') {
      // Sort by popularity
      result.sort((a, b) => (b.popularity || 0) - (a.popularity || 0));
    } else if (sortBy === 'name') {
      // Sort alphabetically
      result.sort((a, b) => a.name.localeCompare(b.name));
    }
    
    setFilteredFrames(result);
  }, [frameStyles, selectedCategory, sortBy, searchQuery, recommendations]);

  // Handle category selection
  const handleCategoryChange = (category) => {
    setSelectedCategory(category);
  };

  // Handle sort change
  const handleSortChange = (e) => {
    setSortBy(e.target.value);
  };

  // Handle search input change
  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
  };

  // Toggle view mode between grid and list
  const toggleViewMode = () => {
    setViewMode(viewMode === 'grid' ? 'list' : 'grid');
  };

  // Check if a frame is recommended
  const isRecommended = (frameId) => {
    return recommendations.includes(frameId);
  };

  return (
    <div className="frame-selector">
      <div className="frame-selector-header">
        <h2>Select a Frame</h2>
        {dominantColors && dominantColors.length > 0 && (
          <div className="artwork-colors">
            <span>Artwork Colors:</span>
            <div className="color-swatches">
              {dominantColors.slice(0, 5).map((color, index) => (
                <div 
                  key={index}
                  className="color-swatch"
                  style={{ backgroundColor: color }}
                  title={color}
                />
              ))}
            </div>
          </div>
        )}
      </div>
      
      <div className="frame-selector-controls">
        {/* Search input */}
        <div className="search-container">
          <input
            type="text"
            placeholder="Search frames..."
            value={searchQuery}
            onChange={handleSearchChange}
            className="search-input"
          />
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="search-icon">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
        </div>
        
        {/* Sort dropdown */}
        <div className="sort-container">
          <label htmlFor="sort-select">Sort by:</label>
          <select
            id="sort-select"
            value={sortBy}
            onChange={handleSortChange}
            className="sort-select"
          >
            <option value="recommended">Recommended</option>
            <option value="price_low">Price: Low to High</option>
            <option value="price_high">Price: High to Low</option>
            <option value="popularity">Most Popular</option>
            <option value="name">Name</option>
          </select>
        </div>
        
        {/* View mode toggle */}
        <button 
          className="view-mode-toggle" 
          onClick={toggleViewMode}
          aria-label={viewMode === 'grid' ? 'Switch to list view' : 'Switch to grid view'}
        >
          {viewMode === 'grid' ? (
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <line x1="8" y1="6" x2="21" y2="6"></line>
              <line x1="8" y1="12" x2="21" y2="12"></line>
              <line x1="8" y1="18" x2="21" y2="18"></line>
              <line x1="3" y1="6" x2="3.01" y2="6"></line>
              <line x1="3" y1="12" x2="3.01" y2="12"></line>
              <line x1="3" y1="18" x2="3.01" y2="18"></line>
            </svg>
          ) : (
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <rect x="3" y="3" width="7" height="7"></rect>
              <rect x="14" y="3" width="7" height="7"></rect>
              <rect x="14" y="14" width="7" height="7"></rect>
              <rect x="3" y="14" width="7" height="7"></rect>
            </svg>
          )}
        </button>
      </div>
      
      {/* Category tabs */}
      <div className="category-tabs">
        {categories.map((category) => (
          <button
            key={category}
            className={`category-tab ${selectedCategory === category ? 'active' : ''}`}
            onClick={() => handleCategoryChange(category)}
          >
            {category.charAt(0).toUpperCase() + category.slice(1)}
          </button>
        ))}
      </div>
      
      {/* Frame list */}
      {isLoading ? (
        <div className="loading-indicator">
          <div className="spinner"></div>
          <p>Loading frame styles...</p>
        </div>
      ) : (
        <div className={`frame-list ${viewMode}`}>
          {filteredFrames.length === 0 ? (
            <div className="no-results">
              <p>No frames match your current filters. Try adjusting your search or category selection.</p>
            </div>
          ) : (
            filteredFrames.map((frame) => (
              <div
                key={frame.id}
                className={`frame-item ${selectedFrame === frame.id ? 'selected' : ''}`}
                onClick={() => onSelectFrame(frame.id)}
              >
                <div className="frame-image-container">
                  <img 
                    src={frame.thumbnailUrl} 
                    alt={frame.name} 
                    className="frame-image" 
                  />
                  {isRecommended(frame.id) && (
                    <div className="recommended-badge">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                      </svg>
                      <span>AI Recommended</span>
                    </div>
                  )}
                </div>
                <div className="frame-details">
                  <h3 className="frame-name">{frame.name}</h3>
                  <p className="frame-description">{frame.description}</p>
                  <div className="frame-meta">
                    <span className="frame-price">${frame.pricePerInch.toFixed(2)}/inch</span>
                    {frame.tags && (
                      <div className="frame-tags">
                        {frame.tags.slice(0, 3).map((tag) => (
                          <span key={tag} className="frame-tag">{tag}</span>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}
    </div>
  );
};

export default FrameSelector;